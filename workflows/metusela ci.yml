name: Backend CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18.x'  # Adjust based on your Node.js requirement
  MONGODB_VERSION: '5.0'  # Adjust based on your MongoDB requirement

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        ports:
          - 27017:27017

    steps:
      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Install dependencies
      - name: Install Dependencies
        run: npm ci

      # Cache node modules
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Run linting
      - name: Run Linting
        run: npm run lint
        if: ${{ always() }}  # Run even if previous steps fail
        continue-on-error: true  # Don't fail the build on linting issues

      # Run tests
      - name: Run Tests
        env:
          BSC_RPC_URL: ${{ secrets.BSC_RPC_URL }}
          TRUST_ESCROW_ADDRESS: ${{ secrets.TRUST_ESCROW_ADDRESS }}
          MONGO_URI: mongodb://localhost:27017/test_db
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          MONO_SECRET_KEY: ${{ secrets.MONO_SECRET_KEY }}
          MONO_REDIRECT_URL: ${{ secrets.MONO_REDIRECT_URL }}
          POPULAR_TOKENS: ${{ secrets.POPULAR_TOKENS }}
          NODE_ENV: test
        run: npm test

      # Build the application
      - name: Build
        env:
          NODE_ENV: production
        run: npm run build  # Assuming you have a build script

      # Security scan
      - name: Run Security Audit
        run: npm audit --audit-level=moderate
        continue-on-error: true  # Don't fail the build on moderate vulnerabilities


  docker-build:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/trust-escrow-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/trust-escrow-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
